// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    ALU(x=outD, y=outMuxAM, zx=instruction[11],
                            nx=instruction[10],
                            zy=instruction[9],
                            ny=instruction[8],
                             f=instruction[7],
                            no=instruction[6],
                            out=outALU,
                            zr=zrALU,
                            ng=ngALU);

    // D register
    And(a=instruction[15], b=instruction[4], out=fDReg);
    DRegister(in=outALU, load=fDReg, out=outD);

    //Mux of A register or memory data
    And(a=instruction[15], b=instruction[12], out=fMuxAM);
    Mux16(a=outA, b=inM, sel=fMuxAM, out=outMuxAM);

    // A register
    ARegister(in=outMuxInsALU, load=aord1, out=outA);
    // A reigster load flag 
    And(a=instruction[15], b=instruction[5], out=fALU2A);
    Or(a=notAIns, b=fALU2A, out=aord1);
    // Revert A instruction
    Not(in=instruction[15], out=notAIns);

    //Mux of A instruction data or ALU output to A
    Mux16(a[0..14]=instruction[0..14], b=outALU, sel=instruction[15], out=outMuxInsALU);

    //PC 
    PC(in=outA, load=outDMuxPCY, inc=outDMuxPCX, reset=reset, out[0..14]=pc);
    //PC flag
    DMux(in=true, sel=outJMP, a=outDMuxPCX, b=outDMuxPCY);
    //JMP condition
    And(a=instruction[2], b=instruction[1], out=outAndJ1J2);
    And(a=outAndJ1J2, b=instruction[0], out=outAndJ1J2J3);
    And(a=instruction[2], b=ngALU, out=outAndJ1NG);
    And(a=instruction[1], b=zrALU, out=outAndJ2ZR);
    Not(in=ngALU, out=notNG);
    Not(in=zrALU, out=notZR);
    And(a=notNG, b=notZR, out=notNGNotZR);
    And(a=instruction[0], b=notNGNotZR, out=outAndJ3NotNGNotZR);
    Or(a=outAndJ1J2J3, b=outAndJ1NG, out=or1);
    Or(a=or1, b=outAndJ2ZR, out=or2);
    Or(a=or2, b=outAndJ3NotNGNotZR, out=outJMPC);
    And(a=instruction[15], b=outJMPC, out=outJMP);

    //Memory set flag
    And(a=instruction[15], b=instruction[3], out=writeM);
    //Memory addrss
    Or16(a=false, b=outA, out[0..14]=addressM);
    //Memory data
    Or16(a=false, b=outALU, out=outM);
}
